@Tutorial(time: 10) {
    @Intro(title: "Going further") {
        Going further with Swift Testing
        
        @Image(source: <#file#>, alt: "")
    }
    
    @Section(title: "Advanced Swift Testing features") {
        @ContentAndMedia {
            
            
            @Image(source: <#file#>, alt: "Advanced Features screenshot")
        }
        
        @Steps {
            @Step {
                Serialized trait with nested suites.
                
                @Code(name: "ContactDataTests.swift", file: 21-traits-nested-serialized.swift)
            }
            
            @Step {
                Using async/await in a test
                
                @Code(name: "<#display name#>", file: <#filename.swift#>)
            }
            
            Error handling is often less tested but is an important part of the userâ€™s experience. You want to make sure your code fails gracefully in the face of invalid input and unexpected conditions. The expect throws macro make this workflow much easier by building on expectations.
            
            @Step {
                Using async/await in a test
                
                @Code(name: "<#display name#>", file: <#filename.swift#>)
            }
        }
    }
    
    Now that you have all the essentials and some advanced features, the next chapter will be focused on going through some test classes written using `XCTest` and then migrate to Swift Testing syntax. Good luck!
}
